import './globals.css';

import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { AxiosError } from 'axios';
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import { headers } from 'next/headers';
import { ReactNode } from 'react';
import { cookieToInitialState } from 'wagmi';

import { wagmiConfig } from '@/config';
import { TelegramProvider } from '@/providers/TelegramProvider';
import { WalletsConnectProvider } from '@/providers/WalletsConnectProvider';

import { Header } from './Header/Header';

const inter = Inter({ subsets: ['latin'] });

const queryClient = new QueryClient({
  defaultOptions: {
    mutations: {
      onError: (err) => {
        if (err instanceof AxiosError) {
          console.log(`Ooops! ${err.name}: ${err.message}`);
        }
      },
    },
    queries: {
      refetchOnMount: false,
      refetchOnReconnect: false,
      refetchOnWindowFocus: false,
      retry: false,
    },
  },
});

export const metadata: Metadata = {
  description: 'Generated by create next app',
  title: 'Create Next App',
};

export const RootLayout = ({
  children,
}: Readonly<{
  children: ReactNode;
}>) => {
  const initialState = cookieToInitialState(wagmiConfig, headers().get('cookie'));

  return (
    <html lang="en">
      <body className={inter.className}>
        <WalletsConnectProvider initialState={initialState}>
          <QueryClientProvider client={queryClient}>
            <TelegramProvider>
              <Header />
              {children}
            </TelegramProvider>
          </QueryClientProvider>
        </WalletsConnectProvider>
      </body>
    </html>
  ); 
};
